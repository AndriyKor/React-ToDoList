{"version":3,"sources":["List.js","App.js","serviceWorker.js","index.js"],"names":["List","props","items","length","className","scope","map","item","key","indexOf","onClick","handleDelete","App","handleChange","event","setState","value","target","handleClick","state","includes","alert","newItems","concat","storeItems","filter","JSON","parse","localStorage","getItem","console","log","setItem","stringify","placeholder","this","onChange","type","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kOAkCeA,MAhCf,SAAcC,GACZ,OAAOA,EAAMC,MAAMC,OAAS,EAC1B,2BAAOC,UAAU,uBACf,+BACE,4BACE,wBAAIC,MAAM,OAAV,KACA,wBAAIA,MAAM,OAAV,aACA,wBAAIA,MAAM,UAGd,+BACGJ,EAAMC,MAAMI,KAAI,SAAAC,GAAI,OACnB,wBAAIC,IAAKD,GACP,4BAAKN,EAAMC,MAAMO,QAAQF,GAAQ,GACjC,4BAAKA,GACL,wBAAIH,UAAU,cACZ,4BACEA,UAAU,iBACVM,QAAS,kBAAMT,EAAMU,aAAaJ,KAFpC,iBAYV,kDCuDWK,G,kBA/Eb,WAAYX,GAAQ,IAAD,8BACjB,4CAAMA,KAQRY,aAAe,SAAAC,GACb,EAAKC,SAAS,CACZC,MAAOF,EAAMG,OAAOD,SAXL,EAenBE,YAAc,WAAO,IAAD,EACO,EAAKC,MAAtBjB,EADU,EACVA,MAAOc,EADG,EACHA,MAEf,GAAId,EAAMkB,SAASJ,GACjBK,MAAM,SAAD,OAAUL,EAAV,2BACA,CACL,IAAMM,EAAWpB,EAAMqB,OAAOP,GAE9B,EAAKQ,WAAWF,GAEhB,EAAKP,SAAS,CACZb,MAAOoB,EACPN,MAAO,OA3BM,EAgCnBL,aAAe,SAAAJ,GACb,IAAMe,EAAW,EAAKH,MAAMjB,MAAMuB,QAAO,SAAAT,GACvC,OAAOA,IAAUT,KAGnB,EAAKiB,WAAWF,GAEhB,EAAKP,SAAS,CACZb,MAAOoB,KAtCT,EAAKH,MAAQ,CACXjB,MAAOwB,KAAKC,MAAMC,aAAaC,QAAQ,eAAiB,GACxDb,MAAO,IAETc,QAAQC,IAAI,EAAKZ,OANA,E,wEA4CRjB,GACT0B,aAAaI,QAAQ,YAAaN,KAAKO,UAAU/B,M,+BAIjD,OACE,yBAAKE,UAAU,aACb,iDACA,yBAAKA,UAAU,OACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,oBACb,2BACEA,UAAU,eACV8B,YAAY,kBACZlB,MAAOmB,KAAKhB,MAAMH,MAClBoB,SAAUD,KAAKtB,eAEjB,yBAAKT,UAAU,sBACb,4BACEA,UAAU,4BACViC,KAAK,SACL3B,QAASyB,KAAKjB,aAHhB,cASJ,kBAAC,EAAD,CAAMhB,MAAOiC,KAAKhB,MAAMjB,MAAOS,aAAcwB,KAAKxB,sB,GAxE5C2B,IAAMC,YCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.5e1799f2.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction List(props) {\r\n  return props.items.length > 0 ? (\r\n    <table className=\"table table-striped\">\r\n      <thead>\r\n        <tr>\r\n          <th scope=\"col\">#</th>\r\n          <th scope=\"col\">Item Name</th>\r\n          <th scope=\"col\"></th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {props.items.map(item => (\r\n          <tr key={item}>\r\n            <th>{props.items.indexOf(item) + 1}</th>\r\n            <td>{item}</td>\r\n            <td className=\"text-right\">\r\n              <button\r\n                className=\"btn btn-danger\"\r\n                onClick={() => props.handleDelete(item)}\r\n              >\r\n                Delete\r\n              </button>\r\n            </td>\r\n          </tr>\r\n        ))}\r\n      </tbody>\r\n    </table>\r\n  ) : (\r\n    <h4>The list is empty</h4>\r\n  );\r\n}\r\n\r\nexport default List;\r\n","import React from \"react\";\n//import \"./App.css\";\nimport List from \"./List\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      items: JSON.parse(localStorage.getItem(\"ListItems\")) || [],\n      value: \"\"\n    };\n    console.log(this.state);\n  }\n\n  handleChange = event => {\n    this.setState({\n      value: event.target.value\n    });\n  };\n\n  handleClick = () => {\n    const { items, value } = this.state;\n\n    if (items.includes(value)) {\n      alert(`Item '${value}' is already exist`);\n    } else {\n      const newItems = items.concat(value);\n\n      this.storeItems(newItems);\n\n      this.setState({\n        items: newItems,\n        value: \"\"\n      });\n    }\n  };\n\n  handleDelete = item => {\n    const newItems = this.state.items.filter(value => {\n      return value !== item;\n    });\n\n    this.storeItems(newItems);\n\n    this.setState({\n      items: newItems\n    });\n  };\n\n  storeItems(items) {\n    localStorage.setItem(\"ListItems\", JSON.stringify(items));\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <h1>This is ToDo list</h1>\n        <div className=\"row\">\n          <div className=\"col\">\n            <div className=\"input-group mb-3\">\n              <input\n                className=\"form-control\"\n                placeholder=\"Enter item here\"\n                value={this.state.value}\n                onChange={this.handleChange}\n              />\n              <div className=\"input-group-append\">\n                <button\n                  className=\"btn btn-outline-secondary\"\n                  type=\"button\"\n                  onClick={this.handleClick}\n                >\n                  Add Item\n                </button>\n              </div>\n            </div>\n            <List items={this.state.items} handleDelete={this.handleDelete} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}